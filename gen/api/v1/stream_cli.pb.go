// Code generated by protoc-gen-go-cli. DO NOT EDIT.
// versions:
// 	protoc        (unknown)
package v1

import (
	cobra "github.com/spf13/cobra"
	cli "go.einride.tech/protoc-gen-go-cli/cli"
	protojson "google.golang.org/protobuf/encoding/protojson"
	io "io"
	os "os"
)

func NewStreamDemoCommand(use string) *cobra.Command {
	cmd := &cobra.Command{
		Use:   use,
		Short: "",
		Annotations: map[string]string{
			"type": "service",
		},
	}
	cmd.AddCommand(newStreamDemoPingPongCommand())
	return cmd
}

func newStreamDemoPingPongCommand() *cobra.Command {
	cmd := &cobra.Command{
		Use:   "ping-pong",
		Short: "",
	}
	var fromFile string
	cmd.Flags().StringVarP(&fromFile, "from-file", "f", "", "path to a JSON file containing request payload")
	_ = cmd.MarkFlagFilename("from-file", "json")
	cmd.RunE = func(cmd *cobra.Command, args []string) error {
		var request PingPong_Request
		if cmd.Flags().Changed("from-file") {
			data, err := os.ReadFile(fromFile)
			if err != nil {
				return err
			}
			if err := protojson.Unmarshal(data, &request); err != nil {
				return err
			}
		}
		conn, err := cli.Dial(cmd.Context())
		if err != nil {
			return err
		}
		client := NewStreamDemoClient(conn)
		cli.LogRequest(cmd.Context(), &request)
		streamingClient, err := client.PingPong(cmd.Context(), &request)
		if err != nil {
			cli.LogError(cmd.Context(), err)
			os.Exit(1)
		}
		for {
			response, err := streamingClient.Recv()
			if err != nil {
				if err == io.EOF {
					return nil
				}
				cli.LogError(cmd.Context(), err)
				os.Exit(1)
			}
			cli.LogResponse(cmd.Context(), response)
		}
	}
	return cmd
}
