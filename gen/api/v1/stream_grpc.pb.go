// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StreamDemoClient is the client API for StreamDemo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamDemoClient interface {
	PingPong(ctx context.Context, in *PingPong_Request, opts ...grpc.CallOption) (StreamDemo_PingPongClient, error)
}

type streamDemoClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamDemoClient(cc grpc.ClientConnInterface) StreamDemoClient {
	return &streamDemoClient{cc}
}

func (c *streamDemoClient) PingPong(ctx context.Context, in *PingPong_Request, opts ...grpc.CallOption) (StreamDemo_PingPongClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamDemo_ServiceDesc.Streams[0], "/api.StreamDemo/PingPong", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamDemoPingPongClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StreamDemo_PingPongClient interface {
	Recv() (*PingPong_Response, error)
	grpc.ClientStream
}

type streamDemoPingPongClient struct {
	grpc.ClientStream
}

func (x *streamDemoPingPongClient) Recv() (*PingPong_Response, error) {
	m := new(PingPong_Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamDemoServer is the server API for StreamDemo service.
// All implementations should embed UnimplementedStreamDemoServer
// for forward compatibility
type StreamDemoServer interface {
	PingPong(*PingPong_Request, StreamDemo_PingPongServer) error
}

// UnimplementedStreamDemoServer should be embedded to have forward compatible implementations.
type UnimplementedStreamDemoServer struct {
}

func (UnimplementedStreamDemoServer) PingPong(*PingPong_Request, StreamDemo_PingPongServer) error {
	return status.Errorf(codes.Unimplemented, "method PingPong not implemented")
}

// UnsafeStreamDemoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamDemoServer will
// result in compilation errors.
type UnsafeStreamDemoServer interface {
	mustEmbedUnimplementedStreamDemoServer()
}

func RegisterStreamDemoServer(s grpc.ServiceRegistrar, srv StreamDemoServer) {
	s.RegisterService(&StreamDemo_ServiceDesc, srv)
}

func _StreamDemo_PingPong_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PingPong_Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamDemoServer).PingPong(m, &streamDemoPingPongServer{stream})
}

type StreamDemo_PingPongServer interface {
	Send(*PingPong_Response) error
	grpc.ServerStream
}

type streamDemoPingPongServer struct {
	grpc.ServerStream
}

func (x *streamDemoPingPongServer) Send(m *PingPong_Response) error {
	return x.ServerStream.SendMsg(m)
}

// StreamDemo_ServiceDesc is the grpc.ServiceDesc for StreamDemo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamDemo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.StreamDemo",
	HandlerType: (*StreamDemoServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PingPong",
			Handler:       _StreamDemo_PingPong_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/v1/stream.proto",
}
