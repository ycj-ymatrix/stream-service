// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: api/v1/stream.proto

package apiv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StreamDemoServiceClient is the client API for StreamDemoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamDemoServiceClient interface {
	PingPong(ctx context.Context, in *PingPongRequest, opts ...grpc.CallOption) (StreamDemoService_PingPongClient, error)
}

type streamDemoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamDemoServiceClient(cc grpc.ClientConnInterface) StreamDemoServiceClient {
	return &streamDemoServiceClient{cc}
}

func (c *streamDemoServiceClient) PingPong(ctx context.Context, in *PingPongRequest, opts ...grpc.CallOption) (StreamDemoService_PingPongClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamDemoService_ServiceDesc.Streams[0], "/api.v1.StreamDemoService/PingPong", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamDemoServicePingPongClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StreamDemoService_PingPongClient interface {
	Recv() (*PingPongResponse, error)
	grpc.ClientStream
}

type streamDemoServicePingPongClient struct {
	grpc.ClientStream
}

func (x *streamDemoServicePingPongClient) Recv() (*PingPongResponse, error) {
	m := new(PingPongResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamDemoServiceServer is the server API for StreamDemoService service.
// All implementations should embed UnimplementedStreamDemoServiceServer
// for forward compatibility
type StreamDemoServiceServer interface {
	PingPong(*PingPongRequest, StreamDemoService_PingPongServer) error
}

// UnimplementedStreamDemoServiceServer should be embedded to have forward compatible implementations.
type UnimplementedStreamDemoServiceServer struct {
}

func (UnimplementedStreamDemoServiceServer) PingPong(*PingPongRequest, StreamDemoService_PingPongServer) error {
	return status.Errorf(codes.Unimplemented, "method PingPong not implemented")
}

// UnsafeStreamDemoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamDemoServiceServer will
// result in compilation errors.
type UnsafeStreamDemoServiceServer interface {
	mustEmbedUnimplementedStreamDemoServiceServer()
}

func RegisterStreamDemoServiceServer(s grpc.ServiceRegistrar, srv StreamDemoServiceServer) {
	s.RegisterService(&StreamDemoService_ServiceDesc, srv)
}

func _StreamDemoService_PingPong_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PingPongRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamDemoServiceServer).PingPong(m, &streamDemoServicePingPongServer{stream})
}

type StreamDemoService_PingPongServer interface {
	Send(*PingPongResponse) error
	grpc.ServerStream
}

type streamDemoServicePingPongServer struct {
	grpc.ServerStream
}

func (x *streamDemoServicePingPongServer) Send(m *PingPongResponse) error {
	return x.ServerStream.SendMsg(m)
}

// StreamDemoService_ServiceDesc is the grpc.ServiceDesc for StreamDemoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamDemoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.StreamDemoService",
	HandlerType: (*StreamDemoServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PingPong",
			Handler:       _StreamDemoService_PingPong_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/v1/stream.proto",
}
